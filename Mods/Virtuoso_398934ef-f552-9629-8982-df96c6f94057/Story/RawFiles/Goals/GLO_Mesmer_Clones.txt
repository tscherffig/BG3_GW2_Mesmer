Version 1
SubGoalCombiner SGC_AND
INITSECTION
DB_GLO_MESMER_CLONES((CHARACTER)00000000-0000-0000-0000-000000000000, (CHARACTER)00000000-0000-0000-0000-000000000000);
NOT DB_GLO_MESMER_CLONES((CHARACTER)00000000-0000-0000-0000-000000000000, (CHARACTER)00000000-0000-0000-0000-000000000000);

KBSECTION
//REGION Mesmer Clone Equipment Duplication
IF
StatusApplied(_Clone, "MESMER_CLONE_ALIVE", _Player, _)
THEN
CopyCharacterEquipment((CHARACTER)_Clone, (CHARACTER)_Player);
DB_GLO_MESMER_CLONES((CHARACTER)_Clone, (CHARACTER)_Player);
RealtimeObjectTimerLaunch(_Clone, "MesmerCloneEQDup", 100);

IF
ObjectTimerFinished(_Clone, "MesmerCloneEQDup")
AND
DB_GLO_MESMER_CLONES((CHARACTER)_Clone, (CHARACTER)_Player)
THEN
Transform(_Clone, _Player, MESMERCLONE_cf3f0d40-fa12-483a-bf7d-438a8711498b);
PROC_CCO_CreatedMesmerClone(_Clone, _Player);
//RemoveStatus(_Duplicity, "MESMER_CLONE_ALIVE", _Player);
//END_REGION

//Create Clone when "MESMER_CLONE_SPAWN" gets applied
IF
StatusApplied(_Char,"MESMER_CLONE_SPAWN",_Caster,_)
AND
HasPassive(_Caster, "Mesmer_Psychic_Blades_Passive", 0)
AND
IsInCombat(_Char ,1)
AND
GetPosition(_Char,_CharX,_CharY,_CharZ)
AND
GetUUID(_Caster, _CasterUUID)
AND
Concatenate("MesmerCloneCounter_", _CasterUUID, _CounterName)
AND
IsTagged(_Caster, (TAG)MESMER_CLONE_LIMIT_3_5f546d59-2381-4061-a81a-05be70879cd2, 0)
AND
CreateAt(5b2d100d-2080-41a0-ab7f-66d6e73f706f,_CharX,_CharY,_CharZ,1,1,"",_MesmerClone)
THEN
PROC_GW_COMPOUNDING_POWER_ADD(_Caster); 
ApplyStatus(_MesmerClone, "MESMER_CLONE_ALIVE", -1.0, 0, _Caster);
RemoveStatus(_Char,"MESMER_CLONE_SPAWN",_MesmerClone);

// Make sure Deathtype is Lifetime when killing a clone
IF
StatusApplied(_Target, "MESMER_CLONE_DEATH", _Caster, _)
AND
DB_GLO_MESMER_CLONES((CHARACTER)_Target, (CHARACTER)_Caster)
THEN
DebugText((CHARACTER)_Target, "Time to die and not leave a corpse");
Die(_Target, DEATHTYPE.Lifetime, _Target, 0, 1, 0.0);

// Mesmer_Illusionary_Membrane
IF
CastSpell(_Caster, "Shout_Mesmer_Shatter_CryOfFrustration", _, _, _)
AND
HasPassive(_Caster, "Mesmer_Illusionary_Membrane", 1)
AND
GetUUID(_Caster, _CasterUUID)
AND
Concatenate("MesmerCloneCounter_", _CasterUUID, _CounterName)
AND
DB_GlobalCounter(_CounterName, _TurnsInt)
AND
IntegerToReal(_TurnsInt, _TurnsReal)
AND
RealProduct(_TurnsReal, 6.0, _DurationReal)
THEN
ApplyStatus(_Caster, "GW_CHAOS_AURA", _DurationReal, 0, _Caster);

// Mirror Images
IF
UsingSpell(_Caster, "Shout_Mesmer_MirrorImages", _, _, _)
THEN
ApplyStatus(_Caster, "MESMER_CLONE_SPAWN", 1.0, 0, _Caster);

//Shatter: Distortion
IF
CastSpell(_Caster, "Shout_Mesmer_Shatter_Distortion", _, _, _)
AND
DB_GLO_MESMER_CLONES(_MesmerClone, (CHARACTER)_Caster)
AND
GetUUID(_Caster, _CasterUUID)
AND
Concatenate("MesmerCloneCounter_", _CasterUUID, _CounterName)
AND
DB_GlobalCounter(_CounterName, _TurnsInt)
AND
IntegerToReal(_TurnsInt, _TurnsReal)
AND
RealProduct(_TurnsReal, 6.0, _DurationReal)
THEN
ApplyStatus(_Caster, "GW_DISTORTION", _DurationReal, 0, _Caster);

//REGION Continuum Split
//Shatter: Continuum Split
IF
CastSpell(_Caster, "Shout_Mesmer_Shatter_ContinuumSplit", _, _, _)
AND
GetPosition(_Caster, _CharX, _CharY, _CharZ)
AND
GetHitpoints(_Caster, _HP)
AND
DB_GLO_MESMER_CLONES(_MesmerClone, (CHARACTER)_Caster)
AND
GetUUID(_Caster, _CasterUUID)
AND
Concatenate("MesmerCloneCounter_", _CasterUUID, _CounterName)
AND
DB_GlobalCounter(_CounterName, _TurnsInt)
AND
IntegerToReal(_TurnsInt, _TurnsReal)
AND
RealProduct(_TurnsReal, 6.0, _DurationReal)
THEN
ApplyStatus(_Caster, "MESMER_TIME_ANCHORED", _DurationReal, 0, _Caster);
DB_MESMER_CONTINUUMSPLIT(_Caster, _HP, _CharX, _CharY, _CharZ);


//Continuum Shift
IF
StatusRemoved(_Caster, "MESMER_TIME_ANCHORED", _, _)
AND
DB_MESMER_CONTINUUMSPLIT((CHARACTER)_Caster, _HP, _CharX, _CharY, _CharZ)
THEN
SetHitpoints(_Caster, _HP);
TeleportToPosition(_Caster, _CharX, _CharY, _CharZ);
NOT DB_MESMER_CONTINUUMSPLIT(_Caster, _HP, _CharX, _CharY, _CharZ);
//END_REGION

//REGION Well of Action
IF
StatusApplied(_Target,"MESMER_WELL_OF_ACTION_AURA",_Caster,_)
THEN
DB_MESMER_WELLOFACTION(_Target, _Caster);
ApplyStatus(_Caster, "MESMER_WELL_OF_ACTION_TURN_COUNTER", 6.0, 0, _Caster);

IF
StatusRemoved(_Target, "MESMER_WELL_OF_ACTION_AURA", _, _)
AND
DB_MESMER_WELLOFACTION(_Target, _Caster)
THEN
RemoveStatus(_Caster,"MESMER_WELL_OF_ACTION_TURN_COUNTER",_Caster);
NOT DB_MESMER_WELLOFACTION(_Target, _Caster);

IF
StatusApplied(_Caster, "MESMER_WELL_OF_ACTION_TURN_COUNTER_MAX", _, _)
AND
DB_MESMER_WELLOFACTION(_Target, _Caster)
THEN
ApplyStatus(_Target, "MESMER_WELL_OF_ACTION_FINAL_EFFECT", 1.0, 0, _Caster);
RemoveStatus(_Caster,"MESMER_WELL_OF_ACTION_TURN_COUNTER",_Caster);
NOT DB_MESMER_WELLOFACTION(_Target, _Caster);
//END_REGION

//REGION Well of Calamity
IF
StatusApplied(_Target,"MESMER_WELL_OF_CALAMITY_AURA",_Caster,_)
THEN
DB_MESMER_WELLOFCALAMITY(_Target, _Caster);
ApplyStatus(_Caster, "MESMER_WELL_OF_CALAMITY_TURN_COUNTER", 6.0, 0, _Caster);

IF
StatusRemoved(_Target, "MESMER_WELL_OF_CALAMITY_AURA", _, _)
AND
DB_MESMER_WELLOFCALAMITY(_Target, _Caster)
THEN
RemoveStatus(_Caster,"MESMER_WELL_OF_CALAMITY_TURN_COUNTER",_Caster);
NOT DB_MESMER_WELLOFCALAMITY(_Target, _Caster);

IF
StatusApplied(_Caster, "MESMER_WELL_OF_CALAMITY_TURN_COUNTER_MAX", _, _)
AND
DB_MESMER_WELLOFCALAMITY(_Target, _Caster)
THEN
ApplyStatus(_Target, "MESMER_WELL_OF_CALAMITY_FINAL_EFFECT", 1.0, 0, _Caster);
RemoveStatus(_Caster,"MESMER_WELL_OF_CALAMITY_TURN_COUNTER",_Caster);
NOT DB_MESMER_WELLOFCALAMITY(_Target, _Caster);
//END_REGION

//REGION Well of Senility
IF
StatusApplied(_Target,"MESMER_WELL_OF_SENILITY_AURA",_Caster,_)
THEN
DB_MESMER_WELLOFSENILITY(_Target, _Caster);
ApplyStatus(_Caster, "MESMER_WELL_OF_SENILITY_TURN_COUNTER", 6.0, 0, _Caster);

IF
StatusRemoved(_Target, "MESMER_WELL_OF_SENILITY_AURA", _, _)
AND
DB_MESMER_WELLOFSENILITY(_Target, _Caster)
THEN
RemoveStatus(_Caster,"MESMER_WELL_OF_SENILITY_TURN_COUNTER",_Caster);
NOT DB_MESMER_WELLOFCALAMITY(_Target, _Caster);

IF
StatusApplied(_Caster, "MESMER_WELL_OF_SENILITY_TURN_COUNTER_MAX", _, _)
AND
DB_MESMER_WELLOFSENILITY(_Target, _Caster)
THEN
ApplyStatus(_Target, "MESMER_WELL_OF_SENILITY_FINAL_EFFECT", 1.0, 0, _Caster);
RemoveStatus(_Caster,"MESMER_WELL_OF_SENILITY_TURN_COUNTER",_Caster);
NOT DB_MESMER_WELLOFSENILITY(_Target, _Caster);
//END_REGION

//REGION Gravity Well
IF
StatusApplied(_Target,"MESMER_GRAVITY_WELL_AURA",_Caster,_)
THEN
DB_MESMER_GRAVITYWELL(_Target, _Caster);
ApplyStatus(_Caster, "MESMER_GRAVITY_WELL_TURN_COUNTER", 6.0, 0, _Caster);

IF
StatusRemoved(_Target, "MESMER_GRAVITY_WELL_AURA", _, _)
AND
DB_MESMER_GRAVITYWELL(_Target, _Caster)
THEN
RemoveStatus(_Caster,"MESMER_GRAVITY_WELL_TURN_COUNTER",_Caster);
NOT DB_MESMER_GRAVITYWELL(_Target, _Caster);

IF
StatusApplied(_Caster, "MESMER_GRAVITY_WELL_TURN_EFFECT_TRIGGER", _, _)
AND
DB_MESMER_GRAVITYWELL(_Target, _Caster)
THEN
ApplyStatus(_Target, "MESMER_GRAVITY_WELL_TURN_EFFECT", 1.0, 0, _Caster);

IF
StatusApplied(_Caster, "MESMER_GRAVITY_WELL_TURN_COUNTER_MAX", _, _)
AND
DB_MESMER_GRAVITYWELL(_Target, _Caster)
THEN
ApplyStatus(_Target, "MESMER_GRAVITY_WELL_FINAL_EFFECT", 1.0, 0, _Caster);
RemoveStatus(_Caster,"MESMER_GRAVITY_WELL_TURN_COUNTER",_Caster);
NOT DB_MESMER_GRAVITYWELL(_Target, _Caster);
//END_REGION

//REGION Virtuoso
// Rain of Swords
IF
CastSpell(_Caster, "Target_Mesmer_RainOfSwords", _, _, _)
THEN
ApplyStatus(_Caster, "MESMER_CLONE_SPAWN", 1.0, 0, _Caster);

// Psychic Force
IF
CastSpell(_Caster, "Shout_Mesmer_PsychicForce", _, _, _)
THEN
ApplyStatus(_Caster, "MESMER_CLONE_SPAWN", 1.0, 0, _Caster);

// Bladecall
IF
CastSpell(_Caster, "Projectile_Mesmer_Bladecall", _, _, _)
THEN
ApplyStatus(_Caster, "MESMER_CLONE_SPAWN", 1.0, 0, _Caster);

//END_REGION

//REGION Mirage
// Sand through Glass
IF
CastSpell(_Caster, "Rush_Mesmer_SandThroughGlass", _, _, _)
THEN
ApplyStatus(_Caster, "MESMER_MIRAGE_CLOAK", 6.0, 0, _Caster);

// Jaunt
IF
CastedSpell(_Caster, "Target_Mesmer_Jaunt", _, _, _)
THEN
ApplyStatus(_Caster, "MESMER_JAUNT", 1.0, 0, _Caster);

// Mirage Advance save previous location
IF
UsingSpell(_Caster, "Target_Mesmer_MirageAdvance", _, _, _)
AND
GetPosition(_Caster, _CharX, _CharY, _CharZ)
THEN
DB_MESMER_MIRAGEADVANCE(_Caster, _CharX, _CharY, _CharZ);

// Mirage Retreat: Create clone
IF
UsingSpell(_Caster, "Shout_Mesmer_MirageRetreat", _, _, _)
THEN
ApplyStatus(_Caster, "MESMER_CLONE_SPAWN", 1.0, 0, _Caster);

// Mirage Retreat: Return to previous location
IF
CastSpell(_Caster, "Shout_Mesmer_MirageRetreat", _, _, _)
AND
GetPosition(_Caster, _X, _Y, _Z)
AND
DB_MESMER_MIRAGEADVANCE((CHARACTER)_Caster, _CharX, _CharY, _CharZ)
THEN
TeleportToPosition(_Caster, _CharX, _CharY, _CharZ);
NOT DB_MESMER_MIRAGEADVANCE(_Caster, _CharX, _CharY, _CharZ);

// Mirage Advance damage
IF
CastedSpell(_Caster, "Target_Mesmer_MirageAdvance", _, _, _)
THEN
ApplyStatus(_Caster, "MESMER_MIRAGE_ADVANCE", 12.0, 0, _Caster);
//END_REGION

//Phase Retreat
IF
UsingSpell(_Char, "Target_Mesmer_PhaseRetreat", _, _, _)
THEN
ApplyStatus(_Char, "MESMER_CLONE_SPAWN", 1.0, 0, _Char);

//Mind The Gap create clone
IF
CastSpell(_Char, "Shout_Mesmer_MindTheGap", _, _, _)
THEN
ApplyStatus(_Char, "MESMER_CLONE_SPAWN", 1.0, 0, _Char);
//DebugText((CHARACTER)_Char, "MTG_SPAWN");

//REGION Chaos Storm

//Give allies positive conditions and your enemies random negative conditions
IF
StatusApplied((CHARACTER)_Target,"MESMER_CHAOS_STORM_APPLY_RANDOM_POSITIVE", _Cause,_)
AND
Random(3, _RandomID)
THEN
PROC_GW_CHAOSSTORM_APPLY_POSITIVE((CHARACTER)_Target, _RandomID, (CHARACTER)_Cause);
RemoveStatus(_Target,"MESMER_CHAOS_STORM_APPLY_RANDOM_POSITIVE",_Cause);

IF
StatusApplied((CHARACTER)_Target,"MESMER_CHAOS_STORM_APPLY_RANDOM_NEGATIVE", _Cause,_)
AND
Random(3, _RandomID)
THEN
PROC_GW_CHAOSSTORM_APPLY_NEGATIVE((CHARACTER)_Target, _RandomID, (CHARACTER)_Cause);
RemoveStatus(_Target,"MESMER_CHAOS_STORM_APPLY_RANDOM_NEGATIVE",_Cause);


PROC
PROC_GW_CHAOSSTORM_APPLY_POSITIVE((CHARACTER)_Target, (INTEGER)_ID, (CHARACTER)_Cause)
AND
_ID == 1
THEN
ApplyStatus(_Target, "GW_SWIFTNESS", 6.0, 0, _Cause);

PROC
PROC_GW_CHAOSSTORM_APPLY_POSITIVE((CHARACTER)_Target, (INTEGER)_ID, (CHARACTER)_Cause)
AND
_ID == 2
THEN
ApplyStatus(_Target, "GW_AEGIS", 6.0, 0, _Cause);

PROC
PROC_GW_CHAOSSTORM_APPLY_POSITIVE((CHARACTER)_Target, (INTEGER)_ID, (CHARACTER)_Cause)
AND
_ID == 0
THEN
ApplyStatus(_Target, "GW_PROTECTION", 6.0, 0, _Cause);

PROC
PROC_GW_CHAOSSTORM_APPLY_NEGATIVE((CHARACTER)_Target, (INTEGER)_ID, (CHARACTER)_Cause)
AND
_ID == 1
THEN
ApplyStatus(_Target, "GW_WEAKNESS", 6.0, 0, _Cause);

PROC
PROC_GW_CHAOSSTORM_APPLY_NEGATIVE((CHARACTER)_Target, (INTEGER)_ID, (CHARACTER)_Cause)
AND
_ID == 2
THEN
ApplyStatus(_Target, "BLEEDING", 6.0, 0, _Cause);

PROC
PROC_GW_CHAOSSTORM_APPLY_NEGATIVE((CHARACTER)_Target, (INTEGER)_ID, (CHARACTER)_Cause)
AND
_ID == 0
THEN
ApplyStatus(_Target, "GW_CRIPPLE", 6.0, 0, _Cause);

//END_REGION

//REGION Chaos Aura

//Give yourself positive conditions and your foe random negative conditions whenever you are struck.
IF
StatusApplied((CHARACTER)_Target,"GW_CHAOS_AURA_APPLY_RANDOM", _Cause,_)
AND
Random(3, _RandomPositiveID)
AND
Random(3, _RandomNegativeID)
THEN
PROC_GW_CHAOSAURA_APPLY_POSITIVE((CHARACTER)_Cause, _RandomPositiveID);
PROC_GW_CHAOSAURA_APPLY_NEGATIVE((CHARACTER)_Cause, _RandomNegativeID, (CHARACTER)_Target);
RemoveStatus(_Target,"GW_CHAOS_AURA_APPLY_RANDOM",_Cause);

PROC
PROC_GW_CHAOSAURA_APPLY_POSITIVE((CHARACTER)_Caster, (INTEGER)_ID)
AND
_ID == 1
THEN
ApplyStatus(_Caster, "GW_SWIFTNESS", 6.0, 0, _Caster);

PROC
PROC_GW_CHAOSAURA_APPLY_POSITIVE((CHARACTER)_Caster, (INTEGER)_ID)
AND
_ID == 2
THEN
ApplyStatus(_Caster, "GW_REGENERATION", 6.0, 0, _Caster);

PROC
PROC_GW_CHAOSAURA_APPLY_POSITIVE((CHARACTER)_Caster, (INTEGER)_ID)
AND
_ID == 0
THEN
ApplyStatus(_Caster, "GW_FURY", 6.0, 0, _Caster);

PROC
PROC_GW_CHAOSAURA_APPLY_NEGATIVE((CHARACTER)_Caster, (INTEGER)_ID, (CHARACTER)_Target)
AND
_ID == 1
THEN
ApplyStatus(_Target, "GW_WEAKNESS", 6.0, 0, _Caster);

PROC
PROC_GW_CHAOSAURA_APPLY_NEGATIVE((CHARACTER)_Caster, (INTEGER)_ID, (CHARACTER)_Target)
AND
_ID == 2
THEN
ApplyStatus(_Target, "GW_TORMENT", 6.0, 0, _Caster);

PROC
PROC_GW_CHAOSAURA_APPLY_NEGATIVE((CHARACTER)_Caster, (INTEGER)_ID, (CHARACTER)_Target)
AND
_ID == 0
THEN
ApplyStatus(_Target, "GW_CRIPPLE", 6.0, 0, _Caster);

//END_REGION

//Mind The Gap additional damage outer circle
IF
StatusApplied((CHARACTER)_Target,"MESMER_MIND_THE_GAP_HIT", _Cause,_)
AND
GetDistanceTo(_Target, _Cause, _Dist)
AND
_Dist > 2
THEN
ApplyDamage(_Target, 6, "Psychic", _Cause);
RemoveStatus(_Target,"MESMER_MIND_THE_GAP_HIT",_Cause);
DebugText((CHARACTER)_Target, "Mind the Gap outer cirle");

//Spatial Surge additional damage by distance
IF
StatusApplied((CHARACTER)_Target,"MESMER_SPATIAL_SURGE_HIT", _Cause,_)
AND
GetDistanceTo(_Target, _Cause, _Dist)
AND
RealDivide(_Dist, 6.0, _ExtraDamageReal)
AND
RealToInteger(_ExtraDamageReal, _ExtraDamageInt)
THEN
ApplyDamage(_Target, _ExtraDamageInt, "Psychic", _Cause);
RemoveStatus(_Target,"MESMER_SPATIAL_SURGE_HIT",_Cause);

//Illusionary Leap
IF
StatusApplied(_Target,"MESMER_ILLUSIONARY_LEAP_TARGET", _Caster,_)
AND
GetPosition(_Caster,_CharX,_CharY,_CharZ)
AND
GetUUID(_Caster, _CasterUUID)
AND
Concatenate("MesmerCloneCounter_", _CasterUUID, _CounterName)
AND
IsTagged(_Caster, (TAG)MESMER_CLONE_LIMIT_3_5f546d59-2381-4061-a81a-05be70879cd2, 0)
AND
CreateAt(5b2d100d-2080-41a0-ab7f-66d6e73f706f,_CharX,_CharY,_CharZ,1,1,"",_MesmerClone)
THEN
ApplyStatus(_MesmerClone, "MESMER_CLONE_ALIVE", -1.0, 0, _Caster);
ApplyStatus(_MesmerClone, "MESMER_ILLUSIONARY_LEAP_SWAP_TARGET", -1.0, 0, _Caster);
ApplyStatus(_Caster, "MESMER_ILLUSIONARY_LEAP_SWAP_POSSIBLE", 12.0, 0, _Caster);
UseSpell(_MesmerClone, "Rush_Mesmer_IllusionaryCloneLeap", _Target);
//ApplyStatus(_MesmerClone, "MESMER_CLONE_ALIVE", -1.0, 0, _Caster);

/*
//REGION Clones act on the same turn as the player
IF
CombatStarted(_Combat)
AND
DB_GLO_MESMER_CLONES(_MesmerClone, _Caster)
THEN
ApplyStatus(_MesmerClone, "DEACTIVATED", -1.0, 0, _Caster);
DebugText(_MesmerClone, "Deactivated");

IF
TurnEnded(_Player)
AND
HasActiveStatus(_Player, "MESMER_CLONE_LIMIT", 1)
AND
DB_GLO_MESMER_CLONES(_MesmerClone, _Caster)
THEN
ApplyStatus(_MesmerClone, "DEACTIVATED", -1.0, 0, _Caster);
DebugText(_MesmerClone, "Activated");

IF
TurnStarted(_Player)
AND
HasActiveStatus(_Player, "MESMER_CLONE_LIMIT", 1)
AND
DB_GLO_MESMER_CLONES(_MesmerClone, _Caster)
THEN
RemoveStatus(_MesmerClone, "DEACTIVATED");
DebugText(_MesmerClone, "Deactivated");
//END_REGION
*/

IF
CombatEnded(_CombatID)
AND
DB_GLO_MESMER_CLONES(_Clones, _Creator)
THEN
Die(_Clones, DEATHTYPE.Lifetime, _Clones, 0, 1, 0.0);

PROC
PROC_TestMesmer((CHARACTER)_MesmerClone, (CHARACTER)_Caster)
AND
GetUUID(_Caster, _CasterUUID)
THEN
DebugText(_Caster, _CasterUUID);


//REGION testing a counter

// declaring the counter
PROC
PROC_CCO_CreatedMesmerClone((CHARACTER)_MesmerClone, (CHARACTER)_Caster)
AND
    DB_GLO_MESMER_CLONES(_MesmerClone, _Caster)
AND
    GetUUID(_Caster, _CasterUUID)
AND
    Concatenate("MesmerCloneCounter_", _CasterUUID, _CounterName)
AND
    NOT DB_GlobalCounter(_CounterName, _)
THEN
    PROC_DeclareCounter(_CounterName);
	DB_CCO_CasterCounter(_CounterName, _Caster);

// Increase counter when a servant is created
PROC
PROC_CCO_CreatedMesmerClone((CHARACTER)_MesmerClone, (CHARACTER)_Caster)
AND
    DB_GLO_MESMER_CLONES(_MesmerClone, _Caster)
AND
    GetUUID(_Caster, _CasterUUID)
AND
    Concatenate("MesmerCloneCounter_", _CasterUUID, _CounterName)
THEN
    PROC_IncreaseCounter(_CounterName, 1);
    PROC_CCO_DisplayCounter(_Caster);


// Decrease counter when a servant dies
IF
    Died(_MesmerClone)
AND
    DB_GLO_MESMER_CLONES(_MesmerClone, _Caster)
AND
    GetUUID(_Caster, _CasterUUID)
AND
    Concatenate("MesmerCloneCounter_", _CasterUUID, _CounterName)
AND
    DB_GlobalCounter(_CounterName, _Count)
AND
    _Count > 0
THEN
    PROC_DecreaseCounter(_CounterName, 1);
    PROC_CCO_DisplayCounter(_Caster);
	NOT DB_GLO_MESMER_CLONES(_MesmerClone, _Caster);


// Check when the limit is reached and TAG the owner.
IF
    DB_GlobalCounter(_CounterName, _Count)
AND
    _Count == 3
AND
    DB_CCO_CasterCounter(_CounterName, _Caster)
AND
    IsTagged(_Caster, (TAG)MESMER_CLONE_LIMIT_3_5f546d59-2381-4061-a81a-05be70879cd2, 0)
THEN
    DebugText(_Caster, "Upper limit was reached - owner has 3 summons.");
    SetTag(_Caster, (TAG)MESMER_CLONE_LIMIT_3_5f546d59-2381-4061-a81a-05be70879cd2);

// Reset the flag when the counter drops below 3
IF
    DB_CCO_CasterCounter(_CounterName, _Caster)
AND
    DB_GlobalCounter(_CounterName, _Count)
AND
    _Count < 3
AND
    IsTagged(_Caster, (TAG)MESMER_CLONE_LIMIT_3_5f546d59-2381-4061-a81a-05be70879cd2, 1)
THEN
    DebugText(_Caster, "Owner can have summons again");
    ClearTag(_Caster, (TAG)MESMER_CLONE_LIMIT_3_5f546d59-2381-4061-a81a-05be70879cd2);

// Create clone for Illusionary Reversion
IF
    DB_CCO_CasterCounter(_CounterName, _Caster)
AND
    DB_GlobalCounter(_CounterName, _Count)
AND
    _Count == 0
THEN
	PROC_MESMER_Illusionary_Reversion(_Caster);


// Procedure to display current counter for debug reasons.
PROC
PROC_CCO_DisplayCounter((CHARACTER)_Caster)
AND
    GetUUID(_Caster, _CasterUUID)
AND
    Concatenate("MesmerCloneCounter_", _CasterUUID, _CounterName)
AND
    DB_GlobalCounter(_CounterName, _Count)
AND
    ConcatenateInteger("Counter is: ", _Count, _CountText)
THEN
    DebugText(_Caster, _CountText);

//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "__Start"
